module EadExport

  class EadRecord

    include AspaceUtilities
    include EadExportControl
    include EadExportArchdesc

    require 'nokogiri'

    def initialize(options = {})
      if !options[:resource_id]
        raise ArgumentError, ":resource_id is required in the arguments hash - cannot generate EAD record"
      else
        @resource = Resource.includes(:agent_associations, :subject_associations).find options[:resource_id]
        if @resource
          @resource_data = JSON.parse(@resource.api_response)
          source = "lib/xml_templates/ead3_template.xml"
          @doc = Nokogiri::XML(open(source))
          @ead = @doc.root()
        end
      end
    end


    def generate
      generate_control_content()
      generate_archdesc_content()
      # reverse_html_conversion()
      add_namespace_to_ead()
      @doc.to_s
    end


    def add_namespace_to_ead
      @ead['xmlns'] = "http://ead3.archivists.org/schema/"
    end


    def create_element(name, value=nil, attributes={})
      element = Nokogiri::XML::Node.new(name, @doc)
      if value
        element << value
      end
      attributes.each do |k,v|
        element[k] = v
      end
      element
    end


    def remove_xml(string)
      # replace close/open pairs with ';'
      string.gsub!(/\/\<[^\>]+\>\<[^\>]+\>/, '; ')
      # remove all remaining tags
      string.gsub!(/\<[^\>]+\>/, '')
      # cleanup extra spaces
      string.gsub!(/\s\,\s/, ', ')
      string.gsub!(/\s\.\s/, '. ')
      string
    end


    # Control values are specific to NCSU. Implementers should modify this section as required
    # SEE ead_export_control.rb for helper methods
    def generate_control_content
      @control_config = {
        recordid: @resource.eadid,
        ead_url: "http://www.lib.ncsu.edu/findingaids/#{@resource.eadid}/ead",
        finding_aid_url: "http://www.lib.ncsu.edu/findingaids/#{@resource.eadid}",
        ead_title: "Guide to the #{@resource.title}",
        filedesc_notes: ["EAD generated by NCSU Libraries' Collection Guides application using data imported from ArchivesSpace."],
        maintenanceagency_name: "North Carolina State University Libraries, Special Collections Research Center",
        maintenanceagency_code: "us-ncrhsus",
        language: "English",
        langcode: 'eng',
        script: 'Latin',
        scriptcode: 'Latn'
      }

      @control = @ead.xpath('./control').first

      # <recordid>
      control_add_recordid

      # <otherrecordid>
      control_add_otherrecordid

      # <representation>
      control_add_representation

      # <filedesc>
      control_add_filedesc

      # <maintenancestatus>
      control_add_maintenance_status

      # <publicationstatus>
      # NOT USED BY NCSU

      # <maintenanceagency>
      control_add_maintenanceagency

      # <languagedeclaration>
      control_add_languagedeclaration

      # <conventiondeclaration>
      # NOT USED BY NCSU

      # <localtypedeclaration>
      # NOT USED BY NCSU

      # <localcontrol>
      # NOT USED BY NCSU

      # <maintenancehistory>
      control_add_maintenancehistory

      # <sources>
      # NOT USED BY NCSU
    end


    def generate_archdesc_content
      @archdesc = @ead.xpath('./archdesc').first
      if @resource_data['level'] && @resource_data['level'] != 'collection'
        @archdesc['level'] = @resource_data['level']
      else
        @archdesc['level'] = 'collection'
      end

      add_did(@archdesc, @resource)
      add_non_did_notes(@archdesc, @resource)
      add_controlaccess(@archdesc, @resource)
      if @resource.total_components > 0
        archdesc_add_dsc
      end
    end

  end

end
